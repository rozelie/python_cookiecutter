set shell := ["sh", "-c"]

root_dir := justfile_directory()
src_dir := root_dir / "{{cookiecutter.project_slug}}"
tests_dir := root_dir / "tests"
venv_bin := root_dir / "venv" / "bin"
python := venv_bin / "python"
entrypoint := src_dir / "__main__.py"
docker_image := "{{cookiecutter.project_slug}}:local"

{% raw -%}
default: format lint test

# Install the package and dev dependencies into a virtualenv.
setup:
	python3 -m venv venv
	{{python}} -m pip install .
	{{python}} -m pip install .[dev]

# Run the package.
run:
	PYTHONPATH="{{root_dir}}" PYTHONUNBUFFERED=1 {{python}} {{entrypoint}}

# Run pytest on the tests dir.
test:
	PYTHONPATH="{{root_dir}}" PYTHONUNBUFFERED=1 {{python}} -m pytest {{tests_dir}}

# Run black and isort on package and tests dirs.
format:
	{{venv_bin}}/black {{src_dir}} {{tests_dir}}
	{{venv_bin}}/isort {{src_dir}} {{tests_dir}}

# Run ruff and mypy on package files.
lint:
	{{venv_bin}}/ruff {{src_dir}}
	{{venv_bin}}/mypy {{src_dir}}

# Build a Docker image for the package.
docker_build:
	docker build -t {{docker_image}} .

# Run the Docker image for the package.
docker_run:
	docker run -it --rm {{docker_image}}

# Publish the package to test.pypi.org.
publish_to_testpypi:
	# register account at https://test.pypi.org/account/register/
	{{python}} -m pip install --upgrade build twine
	{{python}} -m build
	{{python}} -m twine upload --repository testpypi dist/*
	rm -rf dist

# Publish the package to pypi.org.
publish_to_pypi:
	# register account at https://pypi.org/account/register/
	{{python}} -m pip install --upgrade build twine
	{{python}} -m build
	{{python}} -m twine upload --repository pypi dist/*
	rm -rf dist
{% endraw %}